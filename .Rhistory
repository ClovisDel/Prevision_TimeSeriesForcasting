print(summary(driftm))
checkresiduals(driftm)
accuracy(driftm, data_ts_test)
print(summary(snaivem))
checkresiduals(snaivem)
accuracy(snaivem, data_ts_test)
Annees=as.numeric(time(data_ts_train))
ts_DataFrame =data.frame(trafic=data_ts_train,X=as.numeric(Annees))
Regression <- lm(trafic~X,data = ts_DataFrame)
tendance=predict(Regression)
#les 8 prochains mois
AnneeMoisNumericFutur=seq(max(Annees)+1/12,length=8,by=1/12)
tendance2=predict(Regression, newdata=data.frame(X=AnneeMoisNumericFutur))
ts_DataFrame$trafic_residual <- residuals(Regression)
ts_DataFrame$mois <- round(ts_DataFrame$X - trunc(ts_DataFrame$X),digit=4)
Regression2 =lm(trafic_residual~0+as.factor(mois),data=ts_DataFrame)
prediction2 =predict(Regression2)
MoisNumeric= round(AnneeMoisNumericFutur - trunc(AnneeMoisNumericFutur
),4)
Prediction3 =predict( Regression2, newdata= data.frame(mois=MoisNumeric))
ResidusRegression2=residuals(Regression2)
hist(ResidusRegression2)
1.96*sqrt(var(ResidusRegression2))
ACF_Sur_Valeurs_Predites <- acf(prediction2)
print(data.frame(ACF_Sur_Valeurs_Predites$lag,ACF_Sur_Valeurs_Predites$acf)[1:13,])
#Constantes
Nombre_Observations=96
decalage=12
#Estimations
moyenneMu=mean(prediction2)
sdSigma=sd(prediction2)
Serie1=prediction2[(decalage+1): 96   ]
Serie2=prediction2[   1 :(96-decalage)]
GammaDecalage12=mean((Serie1-moyenneMu)*(Serie2-moyenneMu))*((Nombre_Observations-decalage)/(Nombre_Observations))
RhoDecalage12=GammaDecalage12/(sdSigma^2)
RhoDecalage12
plot  ( 1:length(prediction2),   prediction2,type="l")
points((1:length(prediction2))-5,prediction2,type="l",col="red")
print(data.frame(ACF_Sur_Valeurs_Predites$lag,ACF_Sur_Valeurs_Predites$acf)[1:13,])
plot(acf(ResidusRegression2))
Buys_ballot_plot_tendance <- plot(data_ts,
main = "Application du modèle de Buys_Ballot",
xlab = "Années",
ylab = "Nombre de Voyageurs")
#droite de tendance
lines(Annees,tendance,col="blue",lwd=2)
#prédiction de la tendance futur
lines(AnneeMoisNumericFutur,tendance2,col="red")
Buys_ballot_plot <- plot(data_ts,
main = "Application du modèle de Buys_Ballot",
xlab = "Années",
ylab = "Nombre de Voyageurs")
#prédiction du modèle de Buys ballot
lines(Annees,tendance+prediction2,col="blue",lwd=2)
#Interval de confiance
polygon(c(AnneeMoisNumericFutur,rev(AnneeMoisNumericFutur)),
c(tendance2+Prediction3-1.96*sqrt(var(ResidusRegression2)),
rev(tendance2+Prediction3+1.96*sqrt(var(ResidusRegression2)))),
col="cadetblue1",border=NA)
#Prediction des valeurs
lines(AnneeMoisNumericFutur,tendance2+Prediction3,col="blue",lwd=2)
lines(data_ts_test,col="black",lwd=3)
Buys_ballot_plot <- plot(data_ts_test,
main = "Application du modèle de Buys_Ballot",
xlab = "Années",
ylab = "Nombre de Voyageurs")
#prédiction du modèle de Buys ballot
lines(Annees,tendance+prediction2,col="blue",lwd=2)
#Interval de confiance
polygon(c(AnneeMoisNumericFutur,rev(AnneeMoisNumericFutur)),
c(tendance2+Prediction3-1.96*sqrt(var(ResidusRegression2)),
rev(tendance2+Prediction3+1.96*sqrt(var(ResidusRegression2)))),
col="cadetblue1",border=NA)
#Prediction des valeurs
lines(AnneeMoisNumericFutur,tendance2+Prediction3,col="blue",lwd=2)
lines(data_ts_test,col="black",lwd=3)
DataAffichageGGplot = as.data.frame(data_ts)
DataAffichageGGplot$Annees = c(Annees, AnneeMoisNumericFutur)
DataAffichageGGplot$AnneesRound = round(DataAffichageGGplot$Annees)
DataAffichageGGplot$PredictionTendanceBuysBalot = c(tendance ,tendance2)
DataAffichageGGplot$BuysBalotModele = c(tendance+prediction2,tendance2+Prediction3 )
plotBuysBallot <- Affichage_Prediction(DataAffichageGGplot, DataAffichageGGplot$BuysBalotModele)
plotBuysBallot
library(tidyverse)
install.packages("tidyverse")
knitr::opts_chunk$set(echo = TRUE)
source("Fonctions.R", local = knitr::knit_global())
#install for export in pdf file
#tinytex::install_tinytex()
if(!require(forecast)) install.packages("tm", repos = "http://cran.us.r-project.org")
require(forecast)
if(!require(fpp2)) install.packages("tm", repos = "http://cran.us.r-project.org")
require(fpp2)
if(!require(MLmetrics)) install.packages("tm", repos = "http://cran.us.r-project.org")
require(MLmetrics)
if(!require(ggplot2)) install.packages("tm", repos = "http://cran.us.r-project.org")
require(ggplot2)
if(!require(fpp2)) install.packages("tm", repos = "http://cran.us.r-project.org")
require(fpp2)
if(!require(TSstudio)) install.packages("tm", repos = "http://cran.us.r-project.org")
require(TSstudio)
if(!require(ggthemes)) install.packages("tm", repos = "http://cran.us.r-project.org")
require(ggthemes)
if(!require(timetk)) install.packages("tm", repos = "http://cran.us.r-project.org")
require(timetk)
if(!require(keras)) install.packages("tm", repos = "http://cran.us.r-project.org")
require(keras)
if(!require(tensorflow)) install.packages("tm", repos = "http://cran.us.r-project.org")
require(tensorflow)
library(keras)
library(tensorflow)
#install_keras()
#install_tensorflow(version = "nightly")
#Set up Font
windowsFonts("Rubik" = windowsFont("Rubik"))
library(readr)
data <- read_delim("Trafic-voyageurs.csv",
delim = ";", locale = locale(encoding = "ISO-8859-1"))
data_value <- data[,2]
summary(data)
library(TSstudio)
data_ts <- ts(data_value, start=2011, frequency=12)
plot_1_TimeSeries(data_ts)
#revoir l affichage car ca prend pas en compte tt 2019
data_ts_train <- window(data_ts, start = c(2011, 1), end = c(2018,12))
data_ts_test <- window(data_ts, start= c(2019,1), end = c(2019,8))
names(data)[1] <- "ds"
names(data)[2] <- "y"
data_train <- data[1:96,]
data_test <- data[97:104,]
plot(data_ts, xlim=c(2011,2020))
lines(data_ts_test, col=3)
legend("topleft", lty = 1, col=c(1,3), legend=c("Série chronologique Train", "Série chronologique Test"))
library(tseries)
adf.test(data_ts) #p-value <0.5 => on ne rejete pas H0 => non stationnaire
kpss.test(data_ts)
ggseasonplot(data_ts)
data_ts_without_trend = diff(data_ts)
SeasonPlot <-  ggseasonplot(data_ts_without_trend)+
labs(title = "Trafic sans la tendance",
subtitle = "Visualisation de la saisonnalité",
x="Mois",
y= "Nombre de Voyageurs")+
geom_line(size=1.1, alpha = 0.65)+
theme_fivethirtyeight()+
theme(axis.title = element_text())+
scale_color_brewer(palette = "Paired") +
theme(axis.title = element_text(), text = element_text(family = "Rubik"))
SeasonPlot
decomposed_data <- decompose(data_ts_train, type="additive")
plot(decomposed_data$trend)
plot(decomposed_data$seasonal)
plot(decomposed_data$random)
boxplot(data_ts ~ cycle(data_ts))
checkresiduals(remainder(decomposed_data))
library(forecast)
mean <- meanf(data_ts_train, h=8)
naivem <- naive(data_ts_train, h=8)
driftm <- rwf(data_ts_train, h=8, drif=T)
snaivem <- snaive(data_ts_train, h=8)
plot(mean, plot.conf = F, main="")
lines(naivem$mean, col=2, lty=1)
lines(driftm$mean, col=5, lty=1)
lines(snaivem$mean, col = 4, lty=1)
legend("topleft", lty=1, col=c(1,2,3,4), legend=c("Mean Method", "Naive Method", "Drif Method", "Seasonal Naive"))
#comparaison :
plot(snaivem, plot.conf = F, main="")
lines(data_ts_test, col = 6, lty=1, lwd=3)
plot(driftm, plot.conf = F, main="")
lines(data_ts_test, col = 6, lty=1, lwd=3)
print(summary(mean))
checkresiduals(mean)
accuracy(mean, data_ts_test)
print(summary(naivem))
checkresiduals(naivem)
accuracy(naivem, data_ts_test)
print(summary(driftm))
checkresiduals(driftm)
accuracy(driftm, data_ts_test)
print(summary(snaivem))
checkresiduals(snaivem)
accuracy(snaivem, data_ts_test)
Annees=as.numeric(time(data_ts_train))
ts_DataFrame =data.frame(trafic=data_ts_train,X=as.numeric(Annees))
Regression <- lm(trafic~X,data = ts_DataFrame)
tendance=predict(Regression)
#les 8 prochains mois
AnneeMoisNumericFutur=seq(max(Annees)+1/12,length=8,by=1/12)
tendance2=predict(Regression, newdata=data.frame(X=AnneeMoisNumericFutur))
ts_DataFrame$trafic_residual <- residuals(Regression)
ts_DataFrame$mois <- round(ts_DataFrame$X - trunc(ts_DataFrame$X),digit=4)
Regression2 =lm(trafic_residual~0+as.factor(mois),data=ts_DataFrame)
prediction2 =predict(Regression2)
MoisNumeric= round(AnneeMoisNumericFutur - trunc(AnneeMoisNumericFutur
),4)
Prediction3 =predict( Regression2, newdata= data.frame(mois=MoisNumeric))
ResidusRegression2=residuals(Regression2)
hist(ResidusRegression2)
1.96*sqrt(var(ResidusRegression2))
ACF_Sur_Valeurs_Predites <- acf(prediction2)
print(data.frame(ACF_Sur_Valeurs_Predites$lag,ACF_Sur_Valeurs_Predites$acf)[1:13,])
#Constantes
Nombre_Observations=96
decalage=12
#Estimations
moyenneMu=mean(prediction2)
sdSigma=sd(prediction2)
Serie1=prediction2[(decalage+1): 96   ]
Serie2=prediction2[   1 :(96-decalage)]
GammaDecalage12=mean((Serie1-moyenneMu)*(Serie2-moyenneMu))*((Nombre_Observations-decalage)/(Nombre_Observations))
RhoDecalage12=GammaDecalage12/(sdSigma^2)
RhoDecalage12
plot  ( 1:length(prediction2),   prediction2,type="l")
points((1:length(prediction2))-5,prediction2,type="l",col="red")
print(data.frame(ACF_Sur_Valeurs_Predites$lag,ACF_Sur_Valeurs_Predites$acf)[1:13,])
plot(acf(ResidusRegression2))
Buys_ballot_plot_tendance <- plot(data_ts,
main = "Application du modèle de Buys_Ballot",
xlab = "Années",
ylab = "Nombre de Voyageurs")
#droite de tendance
lines(Annees,tendance,col="blue",lwd=2)
#prédiction de la tendance futur
lines(AnneeMoisNumericFutur,tendance2,col="red")
Buys_ballot_plot <- plot(data_ts,
main = "Application du modèle de Buys_Ballot",
xlab = "Années",
ylab = "Nombre de Voyageurs")
#prédiction du modèle de Buys ballot
lines(Annees,tendance+prediction2,col="blue",lwd=2)
#Interval de confiance
polygon(c(AnneeMoisNumericFutur,rev(AnneeMoisNumericFutur)),
c(tendance2+Prediction3-1.96*sqrt(var(ResidusRegression2)),
rev(tendance2+Prediction3+1.96*sqrt(var(ResidusRegression2)))),
col="cadetblue1",border=NA)
#Prediction des valeurs
lines(AnneeMoisNumericFutur,tendance2+Prediction3,col="blue",lwd=2)
lines(data_ts_test,col="black",lwd=3)
Buys_ballot_plot <- plot(data_ts_test,
main = "Application du modèle de Buys_Ballot",
xlab = "Années",
ylab = "Nombre de Voyageurs")
#prédiction du modèle de Buys ballot
lines(Annees,tendance+prediction2,col="blue",lwd=2)
#Interval de confiance
polygon(c(AnneeMoisNumericFutur,rev(AnneeMoisNumericFutur)),
c(tendance2+Prediction3-1.96*sqrt(var(ResidusRegression2)),
rev(tendance2+Prediction3+1.96*sqrt(var(ResidusRegression2)))),
col="cadetblue1",border=NA)
#Prediction des valeurs
lines(AnneeMoisNumericFutur,tendance2+Prediction3,col="blue",lwd=2)
lines(data_ts_test,col="black",lwd=3)
DataAffichageGGplot = as.data.frame(data_ts)
DataAffichageGGplot$Annees = c(Annees, AnneeMoisNumericFutur)
DataAffichageGGplot$AnneesRound = round(DataAffichageGGplot$Annees)
DataAffichageGGplot$PredictionTendanceBuysBalot = c(tendance ,tendance2)
DataAffichageGGplot$BuysBalotModele = c(tendance+prediction2,tendance2+Prediction3 )
plotBuysBallot <- Affichage_Prediction(DataAffichageGGplot, DataAffichageGGplot$BuysBalotModele)
plotBuysBallot
library(tidyverse)
#Utilisation de Cairo pour appliquer de l'anti-Aliasing sur le plot
library('Cairo')
install.packages("Cairo")
knitr::opts_chunk$set(echo = TRUE)
source("Fonctions.R", local = knitr::knit_global())
#install for export in pdf file
#tinytex::install_tinytex()
if(!require(forecast)) install.packages("tm", repos = "http://cran.us.r-project.org")
require(forecast)
if(!require(fpp2)) install.packages("tm", repos = "http://cran.us.r-project.org")
require(fpp2)
if(!require(MLmetrics)) install.packages("tm", repos = "http://cran.us.r-project.org")
require(MLmetrics)
if(!require(ggplot2)) install.packages("tm", repos = "http://cran.us.r-project.org")
require(ggplot2)
if(!require(fpp2)) install.packages("tm", repos = "http://cran.us.r-project.org")
require(fpp2)
if(!require(TSstudio)) install.packages("tm", repos = "http://cran.us.r-project.org")
require(TSstudio)
if(!require(ggthemes)) install.packages("tm", repos = "http://cran.us.r-project.org")
require(ggthemes)
if(!require(timetk)) install.packages("tm", repos = "http://cran.us.r-project.org")
require(timetk)
if(!require(keras)) install.packages("tm", repos = "http://cran.us.r-project.org")
require(keras)
if(!require(tensorflow)) install.packages("tm", repos = "http://cran.us.r-project.org")
require(tensorflow)
library(keras)
library(tensorflow)
#install_keras()
#install_tensorflow(version = "nightly")
#Set up Font
windowsFonts("Rubik" = windowsFont("Rubik"))
library(readr)
data <- read_delim("Trafic-voyageurs.csv",
delim = ";", locale = locale(encoding = "ISO-8859-1"))
data_value <- data[,2]
summary(data)
library(TSstudio)
data_ts <- ts(data_value, start=2011, frequency=12)
plot_1_TimeSeries(data_ts)
#revoir l affichage car ca prend pas en compte tt 2019
data_ts_train <- window(data_ts, start = c(2011, 1), end = c(2018,12))
data_ts_test <- window(data_ts, start= c(2019,1), end = c(2019,8))
names(data)[1] <- "ds"
names(data)[2] <- "y"
data_train <- data[1:96,]
data_test <- data[97:104,]
plot(data_ts, xlim=c(2011,2020))
lines(data_ts_test, col=3)
legend("topleft", lty = 1, col=c(1,3), legend=c("Série chronologique Train", "Série chronologique Test"))
library(tseries)
adf.test(data_ts) #p-value <0.5 => on ne rejete pas H0 => non stationnaire
kpss.test(data_ts)
ggseasonplot(data_ts)
data_ts_without_trend = diff(data_ts)
SeasonPlot <-  ggseasonplot(data_ts_without_trend)+
labs(title = "Trafic sans la tendance",
subtitle = "Visualisation de la saisonnalité",
x="Mois",
y= "Nombre de Voyageurs")+
geom_line(size=1.1, alpha = 0.65)+
theme_fivethirtyeight()+
theme(axis.title = element_text())+
scale_color_brewer(palette = "Paired") +
theme(axis.title = element_text(), text = element_text(family = "Rubik"))
SeasonPlot
decomposed_data <- decompose(data_ts_train, type="additive")
plot(decomposed_data$trend)
plot(decomposed_data$seasonal)
plot(decomposed_data$random)
boxplot(data_ts ~ cycle(data_ts))
checkresiduals(remainder(decomposed_data))
library(forecast)
mean <- meanf(data_ts_train, h=8)
naivem <- naive(data_ts_train, h=8)
driftm <- rwf(data_ts_train, h=8, drif=T)
snaivem <- snaive(data_ts_train, h=8)
plot(mean, plot.conf = F, main="")
lines(naivem$mean, col=2, lty=1)
lines(driftm$mean, col=5, lty=1)
lines(snaivem$mean, col = 4, lty=1)
legend("topleft", lty=1, col=c(1,2,3,4), legend=c("Mean Method", "Naive Method", "Drif Method", "Seasonal Naive"))
#comparaison :
plot(snaivem, plot.conf = F, main="")
lines(data_ts_test, col = 6, lty=1, lwd=3)
plot(driftm, plot.conf = F, main="")
lines(data_ts_test, col = 6, lty=1, lwd=3)
print(summary(mean))
checkresiduals(mean)
accuracy(mean, data_ts_test)
print(summary(naivem))
checkresiduals(naivem)
accuracy(naivem, data_ts_test)
print(summary(driftm))
checkresiduals(driftm)
accuracy(driftm, data_ts_test)
print(summary(snaivem))
checkresiduals(snaivem)
accuracy(snaivem, data_ts_test)
Annees=as.numeric(time(data_ts_train))
ts_DataFrame =data.frame(trafic=data_ts_train,X=as.numeric(Annees))
Regression <- lm(trafic~X,data = ts_DataFrame)
tendance=predict(Regression)
#les 8 prochains mois
AnneeMoisNumericFutur=seq(max(Annees)+1/12,length=8,by=1/12)
tendance2=predict(Regression, newdata=data.frame(X=AnneeMoisNumericFutur))
ts_DataFrame$trafic_residual <- residuals(Regression)
ts_DataFrame$mois <- round(ts_DataFrame$X - trunc(ts_DataFrame$X),digit=4)
Regression2 =lm(trafic_residual~0+as.factor(mois),data=ts_DataFrame)
prediction2 =predict(Regression2)
MoisNumeric= round(AnneeMoisNumericFutur - trunc(AnneeMoisNumericFutur
),4)
Prediction3 =predict( Regression2, newdata= data.frame(mois=MoisNumeric))
ResidusRegression2=residuals(Regression2)
hist(ResidusRegression2)
1.96*sqrt(var(ResidusRegression2))
ACF_Sur_Valeurs_Predites <- acf(prediction2)
print(data.frame(ACF_Sur_Valeurs_Predites$lag,ACF_Sur_Valeurs_Predites$acf)[1:13,])
#Constantes
Nombre_Observations=96
decalage=12
#Estimations
moyenneMu=mean(prediction2)
sdSigma=sd(prediction2)
Serie1=prediction2[(decalage+1): 96   ]
Serie2=prediction2[   1 :(96-decalage)]
GammaDecalage12=mean((Serie1-moyenneMu)*(Serie2-moyenneMu))*((Nombre_Observations-decalage)/(Nombre_Observations))
RhoDecalage12=GammaDecalage12/(sdSigma^2)
RhoDecalage12
plot  ( 1:length(prediction2),   prediction2,type="l")
points((1:length(prediction2))-5,prediction2,type="l",col="red")
print(data.frame(ACF_Sur_Valeurs_Predites$lag,ACF_Sur_Valeurs_Predites$acf)[1:13,])
plot(acf(ResidusRegression2))
Buys_ballot_plot_tendance <- plot(data_ts,
main = "Application du modèle de Buys_Ballot",
xlab = "Années",
ylab = "Nombre de Voyageurs")
#droite de tendance
lines(Annees,tendance,col="blue",lwd=2)
#prédiction de la tendance futur
lines(AnneeMoisNumericFutur,tendance2,col="red")
Buys_ballot_plot <- plot(data_ts,
main = "Application du modèle de Buys_Ballot",
xlab = "Années",
ylab = "Nombre de Voyageurs")
#prédiction du modèle de Buys ballot
lines(Annees,tendance+prediction2,col="blue",lwd=2)
#Interval de confiance
polygon(c(AnneeMoisNumericFutur,rev(AnneeMoisNumericFutur)),
c(tendance2+Prediction3-1.96*sqrt(var(ResidusRegression2)),
rev(tendance2+Prediction3+1.96*sqrt(var(ResidusRegression2)))),
col="cadetblue1",border=NA)
#Prediction des valeurs
lines(AnneeMoisNumericFutur,tendance2+Prediction3,col="blue",lwd=2)
lines(data_ts_test,col="black",lwd=3)
Buys_ballot_plot <- plot(data_ts_test,
main = "Application du modèle de Buys_Ballot",
xlab = "Années",
ylab = "Nombre de Voyageurs")
#prédiction du modèle de Buys ballot
lines(Annees,tendance+prediction2,col="blue",lwd=2)
#Interval de confiance
polygon(c(AnneeMoisNumericFutur,rev(AnneeMoisNumericFutur)),
c(tendance2+Prediction3-1.96*sqrt(var(ResidusRegression2)),
rev(tendance2+Prediction3+1.96*sqrt(var(ResidusRegression2)))),
col="cadetblue1",border=NA)
#Prediction des valeurs
lines(AnneeMoisNumericFutur,tendance2+Prediction3,col="blue",lwd=2)
lines(data_ts_test,col="black",lwd=3)
DataAffichageGGplot = as.data.frame(data_ts)
DataAffichageGGplot$Annees = c(Annees, AnneeMoisNumericFutur)
DataAffichageGGplot$AnneesRound = round(DataAffichageGGplot$Annees)
DataAffichageGGplot$PredictionTendanceBuysBalot = c(tendance ,tendance2)
DataAffichageGGplot$BuysBalotModele = c(tendance+prediction2,tendance2+Prediction3 )
plotBuysBallot <- Affichage_Prediction(DataAffichageGGplot, DataAffichageGGplot$BuysBalotModele)
plotBuysBallot
library(tidyverse)
#Utilisation de Cairo pour appliquer de l'anti-Aliasing sur le plot
library('Cairo')
ggsave(plotBuysBallot, path= "Shiny/www",  filename = 'BuysBallotPlotPrediction.png', dpi = 1500, type = 'cairo',
width = 8, height = 5, units = 'in')
#Save aussi du SeasonPlot
ggsave(SeasonPlot, path= "Shiny/www",  filename = 'SeasonPlot.png', dpi = 1500, type = 'cairo',
width = 8, height = 5, units = 'in')
library(forecast)
ma_model <- ma(data_ts_train, order=12, centre=TRUE)
ma_model
plot(data_ts_train)
lines(ma_model, col="blue", lwd=3)
ma_forecast <- forecast(ma_model, h=14)
ma_forecast
plot(ma_forecast)
accuracy(ma_forecast, data_ts_test)
fcst_se <- ses(data_ts_train, h = 8)
print(summary(fcst_se))
checkresiduals(fcst_se)
plot(fcst_se)
lines(data_ts_test, col="red")
df_se = as.data.frame(fcst_se)
predict_value_se <- df_se$`Point Forecast`
MAPE(predict_value_se, data_ts_test)*100
fit_ets <- ets(data_ts_train)
print(summary(fit_ets))
checkresiduals(fit_ets)
fcst_ets <- forecast(fit_ets, h=8)
plot(fcst_ets)
lines(data_ts_test, col="red")
df_ets = as.data.frame(fcst_ets)
predict_value_ets = df_ets$`Point Forecast`
MAPE(predict_value_ets, data_ts_test)*100
DataAffichageGGplot$ModeleLissageExponentielle <- c(fcst_ets$fitted ,predict_value_ets )
Affichage_Prediction(DataAffichageGGplot, DataAffichageGGplot$ModeleLissageExponentielle)
# retourne les meilleurs paramètres
# d=1 enleve la tendance
# D=1 enleve la saisonnalité
# => avoir des données stationnaires
# trace : voir les résultats
fit_arima <- auto.arima(data_ts_train, d=1, D=1, stepwise = FALSE, approximation = FALSE, trace=TRUE)
print(summary(fit_arima))
checkresiduals(fit_arima)
fcst_arima <- forecast(fit_arima, h=8)
plot(fcst_arima)
lines(data_ts_test, col='red')
df_arima = as.data.frame(fcst_arima)
predict_value_arima = df_arima$`Point Forecast`
MAPE(predict_value_arima, data_ts_test)*100
DataAffichageGGplot$ModeleArima <-  c(fit_arima$fitted ,predict_value_arima )
Affichage_Prediction(DataAffichageGGplot, DataAffichageGGplot$ModeleArima)
library(prophet)
library(zoo)
data_train$ds <- as.Date( as.yearmon(time(data_ts_train)))
model_prophet <- prophet(data_train)
forecast_prophet <- make_future_dataframe(model_prophet, periods = 8, freq = 'month')
AAPLfc <- predict(model_prophet, forecast_prophet)
tail(AAPLfc[c("ds", "yhat", "yhat_lower", "yhat")])
dyplot.prophet(model_prophet, AAPLfc)
data_pp <- subset(AAPLfc, select=c("yhat"))
data_pp_ts <- ts(data_tttt, start=2011, frequency=12)
model_prophet <- prophet(data_train)
forecast_prophet <- make_future_dataframe(model_prophet, periods = 8, freq = 'month')
AAPLfc <- predict(model_prophet, forecast_prophet)
tail(AAPLfc[c("ds", "yhat", "yhat_lower", "yhat")])
dyplot.prophet(model_prophet, AAPLfc)
data_pp <- subset(AAPLfc, select=c("yhat"))
data_pp_ts <- ts(data_pp, start=2011, frequency=12)
data_pp_ts_w <- window(data_pp_ts, start= c(2019,1), end = c(2019,8))
MAPE(data_pp_ts_w, data_ts_test) #3.2
#
#
# plot(data_ts)
# lines(data_pp_ts_w, col="red")
