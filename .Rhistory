fitted
length(fitted)
lstm_forecast <- ts(lstm_forecast,
start = c(2019, 1),
end = c(2019, 12),
frequency = 12
)
lstm_forecast_display <- window(lstm_forecast, start= c(2019,1), end = c(2019,8))
input_ts <- ts(data$y,
start = c(2011, 1),
end = c(2018, 12),
frequency = 12)
lstm_forecast_display
data_ts_test
plot(input_ts, xlim=c(2011,2020))
#lines(data_ts_test)
lines(lstm_forecast_display, col=3)
model_prophet <- prophet(data_train)
library(prophet)
model_prophet <- prophet(data_train)
forecast_prophet <- make_future_dataframe(model_prophet, h=8)
View(data_train)
View(data_test)
library(prophet)
model_prophet <- prophet(data_train)
forecast_prophet <- make_future_dataframe(model_prophet, periods = 242)
library(prophet)
model_prophet <- prophet(data_train)
forecast_prophet <- make_future_dataframe(model_prophet, periods = 242)
forecast_prophet
forecast_prophet <- make_future_dataframe(model_prophet, periods = 242, freq = 60 * 60)
library(prophet)
model_prophet <- prophet(data_train)
forecast_prophet <- make_future_dataframe(model_prophet, periods = 242, freq = 60 * 60)
forecast_prophet
library(prophet)
model_prophet <- prophet(data_train)
forecast_prophet <- make_future_dataframe(model_prophet, periods = 242)
AAPLfc <- predict(model_prophet, forecast_prophet)
AAPLfc
plot(F1, AAPLfc, xlab="Years", ylab="Value")
library(prophet)
model_prophet <- prophet(data_train)
forecast_prophet <- make_future_dataframe(model_prophet, periods = 242)
AAPLfc <- predict(model_prophet, forecast_prophet)
tail(AAPLfc[c("ds", "yhat", "yhat_lower", "yhat_upper")])
plot(model_prophet, AAPLfc, xlab="Years", ylab="Value")
prophet_plot_components(model_prophet, AAPLfc)
library(prophet)
model_prophet <- prophet(data_train)
forecast_prophet <- make_future_dataframe(model_prophet, periods = 242, freq="M")
library(prophet)
model_prophet <- prophet(data_train)
forecast_prophet <- make_future_dataframe(model_prophet, periods = 242, freq='M')
library(prophet)
model_prophet <- prophet(data_train)
forecast_prophet <- make_future_dataframe(model_prophet, periods = 8, freq='M')
library(prophet)
model_prophet <- prophet(data_train)
forecast_prophet <- make_future_dataframe(model_prophet, periods = 242)
AAPLfc <- predict(model_prophet, forecast_prophet)
tail(AAPLfc[c("ds", "yhat", "yhat_lower", "yhat")])
plot(model_prophet, AAPLfc, xlab="Years", ylab="Value")
prophet_plot_components(model_prophet, AAPLfc)
library(prophet)
model_prophet <- prophet(data_train)
forecast_prophet <- make_future_dataframe(model_prophet, periods = 242, freq = 'month')
AAPLfc <- predict(model_prophet, forecast_prophet)
tail(AAPLfc[c("ds", "yhat", "yhat_lower", "yhat")])
plot(model_prophet, AAPLfc, xlab="Years", ylab="Value")
prophet_plot_components(model_prophet, AAPLfc)
library(prophet)
model_prophet <- prophet(data_train)
forecast_prophet <- make_future_dataframe(model_prophet, periods = 8, freq = 'month')
AAPLfc <- predict(model_prophet, forecast_prophet)
tail(AAPLfc[c("ds", "yhat", "yhat_lower", "yhat")])
plot(model_prophet, AAPLfc, xlab="Years", ylab="Value")
prophet_plot_components(model_prophet, AAPLfc)
library(prophet)
model_prophet <- prophet(data_train)
forecast_prophet <- make_future_dataframe(model_prophet, periods = 8, freq = 'month')
AAPLfc <- predict(model_prophet, forecast_prophet)
tail(AAPLfc[c("ds", "yhat", "yhat_lower", "yhat")])
plot(model_prophet, xlab="Years", ylab="Value")
library(prophet)
model_prophet <- prophet(data_train)
forecast_prophet <- make_future_dataframe(model_prophet, periods = 8, freq = 'month')
AAPLfc <- predict(model_prophet, forecast_prophet)
tail(AAPLfc[c("ds", "yhat", "yhat_lower", "yhat")])
plot(model_prophet, AAPLfc, xlab="Years", ylab="Value")
prophet_plot_components(model_prophet, AAPLfc)
library(prophet)
model_prophet <- prophet(data_train)
forecast_prophet <- make_future_dataframe(model_prophet, periods = 8, freq = 'month')
AAPLfc <- predict(model_prophet, forecast_prophet)
tail(AAPLfc[c("ds", "yhat", "yhat_lower", "yhat")])
dyplot.prophet(model_prophet, AAPLfc)
library(prophet)
model_prophet <- prophet(data_train)
forecast_prophet <- make_future_dataframe(model_prophet, periods = 8, freq = 'month')
AAPLfc <- predict(model_prophet, forecast_prophet)
tail(AAPLfc[c("ds", "yhat", "yhat_lower", "yhat")])
dyplot.prophet(data_ts, AAPLfc)
library(prophet)
model_prophet <- prophet(data_train)
forecast_prophet <- make_future_dataframe(model_prophet, periods = 8, freq = 'month')
AAPLfc <- predict(model_prophet, forecast_prophet)
tail(AAPLfc[c("ds", "yhat", "yhat_lower", "yhat")])
dyplot.prophet(model_prophet, AAPLfc)
AAPLfc
View(df_ets)
View(model_prophet)
library(prophet)
model_prophet <- prophet(data_train)
forecast_prophet <- make_future_dataframe(model_prophet, periods = 8, freq = 'month')
AAPLfc <- predict(model_prophet, forecast_prophet)
tail(AAPLfc[c("ds", "yhat", "yhat_lower", "yhat")])
dyplot.prophet(model_prophet, AAPLfc)
data_tttt <- AAPLfc[,16]
data_tttt
library(prophet)
model_prophet <- prophet(data_train)
forecast_prophet <- make_future_dataframe(model_prophet, periods = 8, freq = 'month')
AAPLfc <- predict(model_prophet, forecast_prophet)
tail(AAPLfc[c("ds", "yhat", "yhat_lower", "yhat")])
dyplot.prophet(model_prophet, AAPLfc)
data_tttt <- AAPLfc[16,]
data_tttt
library(prophet)
model_prophet <- prophet(data_train)
forecast_prophet <- make_future_dataframe(model_prophet, periods = 8, freq = 'month')
AAPLfc <- predict(model_prophet, forecast_prophet)
tail(AAPLfc[c("ds", "yhat", "yhat_lower", "yhat")])
dyplot.prophet(model_prophet, AAPLfc)
data_tttt <- AAPLfc[,"yhat"]
data_tttt
data_tttt %>%
select("yhat")
library(prophet)
model_prophet <- prophet(data_train)
forecast_prophet <- make_future_dataframe(model_prophet, periods = 8, freq = 'month')
AAPLfc <- predict(model_prophet, forecast_prophet)
tail(AAPLfc[c("ds", "yhat", "yhat_lower", "yhat")])
dyplot.prophet(model_prophet, AAPLfc)
data_tttt %>%
select("yhat")
library(prophet)
model_prophet <- prophet(data_train)
forecast_prophet <- make_future_dataframe(model_prophet, periods = 8, freq = 'month')
AAPLfc <- predict(model_prophet, forecast_prophet)
tail(AAPLfc[c("ds", "yhat", "yhat_lower", "yhat")])
dyplot.prophet(model_prophet, AAPLfc)
data_tttt %>%
select(yhat)
library(prophet)
model_prophet <- prophet(data_train)
forecast_prophet <- make_future_dataframe(model_prophet, periods = 8, freq = 'month')
AAPLfc <- predict(model_prophet, forecast_prophet)
tail(AAPLfc[c("ds", "yhat", "yhat_lower", "yhat")])
dyplot.prophet(model_prophet, AAPLfc)
data_tttt <- subset(AAPLfc, select=c("yhat"))
data_tttt
View(data_test)
library(prophet)
model_prophet <- prophet(data_train)
forecast_prophet <- make_future_dataframe(model_prophet, periods = 8, freq = 'month')
AAPLfc <- predict(model_prophet, forecast_prophet)
tail(AAPLfc[c("ds", "yhat", "yhat_lower", "yhat")])
dyplot.prophet(model_prophet, AAPLfc)
data_tttt <- subset(AAPLfc, select=c("yhat"))
data_tttt <- ts(data_tttt, start=2011, frequency=12)
library(prophet)
model_prophet <- prophet(data_train)
forecast_prophet <- make_future_dataframe(model_prophet, periods = 8, freq = 'month')
AAPLfc <- predict(model_prophet, forecast_prophet)
tail(AAPLfc[c("ds", "yhat", "yhat_lower", "yhat")])
dyplot.prophet(model_prophet, AAPLfc)
data_tttt <- subset(AAPLfc, select=c("yhat"))
data_tttt <- ts(data_tttt, start=2011, frequency=12)
data_tttt
library(prophet)
model_prophet <- prophet(data_train)
forecast_prophet <- make_future_dataframe(model_prophet, periods = 8, freq = 'month')
AAPLfc <- predict(model_prophet, forecast_prophet)
tail(AAPLfc[c("ds", "yhat", "yhat_lower", "yhat")])
dyplot.prophet(model_prophet, AAPLfc)
data_pp <- subset(AAPLfc, select=c("yhat"))
data_pp_ts <- ts(data_tttt, start=2011, frequency=12)
data_pp_ts
library(prophet)
model_prophet <- prophet(data_train)
forecast_prophet <- make_future_dataframe(model_prophet, periods = 8, freq = 'month')
AAPLfc <- predict(model_prophet, forecast_prophet)
tail(AAPLfc[c("ds", "yhat", "yhat_lower", "yhat")])
dyplot.prophet(model_prophet, AAPLfc)
data_pp <- subset(AAPLfc, select=c("yhat"))
data_pp_ts <- ts(data_tttt, start=2011, frequency=12)
data_pp_ts
plot(data_pp_ts)
library(prophet)
model_prophet <- prophet(data_train)
forecast_prophet <- make_future_dataframe(model_prophet, periods = 8, freq = 'month')
AAPLfc <- predict(model_prophet, forecast_prophet)
tail(AAPLfc[c("ds", "yhat", "yhat_lower", "yhat")])
dyplot.prophet(model_prophet, AAPLfc)
data_pp <- subset(AAPLfc, select=c("yhat"))
data_pp_ts <- ts(data_tttt, start=2011, frequency=12)
data_pp_ts
length(data_pp_ts)
plot(data_pp_ts)
library(prophet)
model_prophet <- prophet(data_train)
forecast_prophet <- make_future_dataframe(model_prophet, periods = 8, freq = 'month')
AAPLfc <- predict(model_prophet, forecast_prophet)
tail(AAPLfc[c("ds", "yhat", "yhat_lower", "yhat")])
dyplot.prophet(model_prophet, AAPLfc)
data_pp <- subset(AAPLfc, select=c("yhat"))
data_pp_ts <- ts(data_tttt, start=2011, frequency=12)
data_pp_ts_w <- window(data_pp_ts, start= c(2019,1), end = c(2019,8))
plot(data_pp_ts_w)
library(prophet)
model_prophet <- prophet(data_train)
forecast_prophet <- make_future_dataframe(model_prophet, periods = 8, freq = 'month')
AAPLfc <- predict(model_prophet, forecast_prophet)
tail(AAPLfc[c("ds", "yhat", "yhat_lower", "yhat")])
dyplot.prophet(model_prophet, AAPLfc)
data_pp <- subset(AAPLfc, select=c("yhat"))
data_pp_ts <- ts(data_tttt, start=2011, frequency=12)
data_pp_ts_w <- window(data_pp_ts, start= c(2019,1), end = c(2019,8))
plot(data_ts)
lines(data_pp_ts_w, col="red")
library(prophet)
model_prophet <- prophet(data_train)
forecast_prophet <- make_future_dataframe(model_prophet, periods = 8, freq = 'month')
AAPLfc <- predict(model_prophet, forecast_prophet)
tail(AAPLfc[c("ds", "yhat", "yhat_lower", "yhat")])
dyplot.prophet(model_prophet, AAPLfc)
data_pp <- subset(AAPLfc, select=c("yhat"))
data_pp_ts <- ts(data_tttt, start=2011, frequency=12)
data_pp_ts_w <- window(data_pp_ts, start= c(2019,1), end = c(2019,8))
plot(data_ts)
lines(data_pp_ts_w, col="red")
MAPE(data_pp_ts_w, data_ts_test)*100
library(prophet)
model_prophet <- prophet(data_train)
forecast_prophet <- make_future_dataframe(model_prophet, periods = 8, freq = 'month')
AAPLfc <- predict(model_prophet, forecast_prophet)
tail(AAPLfc[c("ds", "yhat", "yhat_lower", "yhat")])
dyplot.prophet(model_prophet, AAPLfc)
data_pp <- subset(AAPLfc, select=c("yhat"))
data_pp_ts <- ts(data_tttt, start=2011, frequency=12)
data_pp_ts_w <- window(data_pp_ts, start= c(2019,1), end = c(2019,8))
plot(data_ts)
lines(data_pp_ts_w, col="red")
MAPE(data_pp_ts_w, data_ts_test)*100
dyplot.prophet(data_ts, data_pp_ts_w)
library(prophet)
model_prophet <- prophet(data_train)
forecast_prophet <- make_future_dataframe(model_prophet, periods = 8, freq = 'month')
AAPLfc <- predict(model_prophet, forecast_prophet)
tail(AAPLfc[c("ds", "yhat", "yhat_lower", "yhat")])
dyplot.prophet(model_prophet, AAPLfc)
data_pp <- subset(AAPLfc, select=c("yhat"))
data_pp_ts <- ts(data_tttt, start=2011, frequency=12)
data_pp_ts_w <- window(data_pp_ts, start= c(2019,1), end = c(2019,8))
plot(data_ts)
lines(data_pp_ts_w, col="red")
MAPE(data_pp_ts_w, data_ts_test)*100
scale_factors <- c(mean(data$y), sd(data$y))
scaled_train <- data %>%
dplyr::select(y) %>%
dplyr::mutate(y = (y - scale_factors[1]) / scale_factors[2])
scaled_train
prediction <- 24
lag <- prediction
scaled_train <- as.matrix(scaled_train)
# we lag the data 11 times and arrange that into columns
x_train_data <- t(sapply(
1:(length(scaled_train) - lag - prediction + 1),
function(x) scaled_train[x:(x + lag - 1), 1]
))
# now we transform it into 3D form
x_train_arr <- array(
data = as.numeric(unlist(x_train_data)),
dim = c(
nrow(x_train_data),
lag,
1
)
)
#(x_train_data)
#length(x_train_arr)
#head(x_train_arr)
y_train_data <- t(sapply(
(1 + lag):(length(scaled_train) - prediction + 1),
function(x) scaled_train[x:(x + prediction - 1)]
))
y_train_arr <- array(
data = as.numeric(unlist(y_train_data)),
dim = c(
nrow(y_train_data),
prediction,
1
)
)
#head(y_train_data)
#head(y_train_arr)
x_test <- data$y[(nrow(scaled_train) - prediction + 1):nrow(scaled_train)]
x_test_scaled <- (x_test - scale_factors[1]) / scale_factors[2]
x_pred_arr <- array(
data = x_test_scaled,
dim = c(
1,
lag,
1
)
)
lstm_model <- keras_model_sequential()
lstm_model %>%
layer_lstm(units = 50, # size of the layer
batch_input_shape = c(1, 12, 1), # batch size, timesteps, features
return_sequences = TRUE,
stateful = TRUE) %>%
# fraction of the units to drop for the linear transformation of the inputs
layer_dropout(rate = 0.5) %>%
layer_lstm(units = 50,
return_sequences = TRUE,
stateful = TRUE) %>%
layer_dropout(rate = 0.5) %>%
time_distributed(keras::layer_dense(units = 1))
lstm_model %>%
compile(loss = 'mae', optimizer = 'adam', metrics = 'accuracy')
summary(lstm_model)
lstm_model %>% fit(
x = x_train_arr,
y = y_train_arr,
batch_size = 1,
epochs = 20,
verbose = 1,
shuffle = FALSE
)
lstm_model <- keras_model_sequential()
lstm_model %>%
layer_lstm(units = 50, # size of the layer
batch_input_shape = c(1, 24, 1), # batch size, timesteps, features
return_sequences = TRUE,
stateful = TRUE) %>%
# fraction of the units to drop for the linear transformation of the inputs
layer_dropout(rate = 0.5) %>%
layer_lstm(units = 50,
return_sequences = TRUE,
stateful = TRUE) %>%
layer_dropout(rate = 0.5) %>%
time_distributed(keras::layer_dense(units = 1))
lstm_model %>%
compile(loss = 'mae', optimizer = 'adam', metrics = 'accuracy')
summary(lstm_model)
lstm_model %>% fit(
x = x_train_arr,
y = y_train_arr,
batch_size = 1,
epochs = 20,
verbose = 1,
shuffle = FALSE
)
lstm_forecast <- lstm_model %>%
predict(x_pred_arr, batch_size = 1) %>%
.[, , 1]
# rescale en format basique
lstm_forecast <- lstm_forecast * scale_factors[2] + scale_factors[1]
lstm_forecast
fitted <- predict(lstm_model, x_train_arr, batch_size = 1) %>%
.[, , 1]
if (dim(fitted)[2] > 1) {
fit <- c(fitted[, 1], fitted[dim(fitted)[1], 2:dim(fitted)[2]])
} else {
fit <- fitted[, 1]
}
# rescale final de nos données
fitted <- fit * scale_factors[2] + scale_factors[1]
fitted
fitted <- c(rep(NA, lag), fitted)
fitted
length(fitted)
lstm_forecast <- ts(lstm_forecast,
start = c(2019, 1),
end = c(2019, 12),
frequency = 12
)
lstm_forecast_display <- window(lstm_forecast, start= c(2019,1), end = c(2019,8))
input_ts <- ts(data$y,
start = c(2011, 1),
end = c(2018, 12),
frequency = 12)
lstm_forecast_display
data_ts_test
plot(input_ts, xlim=c(2011,2020))
#lines(data_ts_test)
lines(lstm_forecast_display, col=3)
scale_factors <- c(mean(data$y), sd(data$y))
scaled_train <- data %>%
dplyr::select(y) %>%
dplyr::mutate(y = (y - scale_factors[1]) / scale_factors[2])
scaled_train
prediction <- 12
lag <- prediction
scaled_train <- as.matrix(scaled_train)
# we lag the data 11 times and arrange that into columns
x_train_data <- t(sapply(
1:(length(scaled_train) - lag - prediction + 1),
function(x) scaled_train[x:(x + lag - 1), 1]
))
# now we transform it into 3D form
x_train_arr <- array(
data = as.numeric(unlist(x_train_data)),
dim = c(
nrow(x_train_data),
lag,
1
)
)
#(x_train_data)
#length(x_train_arr)
#head(x_train_arr)
y_train_data <- t(sapply(
(1 + lag):(length(scaled_train) - prediction + 1),
function(x) scaled_train[x:(x + prediction - 1)]
))
y_train_arr <- array(
data = as.numeric(unlist(y_train_data)),
dim = c(
nrow(y_train_data),
prediction,
1
)
)
#head(y_train_data)
#head(y_train_arr)
x_test <- data$y[(nrow(scaled_train) - prediction + 1):nrow(scaled_train)]
x_test_scaled <- (x_test - scale_factors[1]) / scale_factors[2]
x_pred_arr <- array(
data = x_test_scaled,
dim = c(
1,
lag,
1
)
)
lstm_model <- keras_model_sequential()
lstm_model %>%
layer_lstm(units = 50, # size of the layer
batch_input_shape = c(1, 12, 1), # batch size, timesteps, features
return_sequences = TRUE,
stateful = TRUE) %>%
# fraction of the units to drop for the linear transformation of the inputs
layer_dropout(rate = 0.5) %>%
layer_lstm(units = 50,
return_sequences = TRUE,
stateful = TRUE) %>%
layer_dropout(rate = 0.5) %>%
time_distributed(keras::layer_dense(units = 1))
lstm_model %>%
compile(loss = 'mae', optimizer = 'adam', metrics = 'accuracy')
summary(lstm_model)
lstm_model %>% fit(
x = x_train_arr,
y = y_train_arr,
batch_size = 1,
epochs = 20,
verbose = 1,
shuffle = FALSE
)
lstm_forecast <- lstm_model %>%
predict(x_pred_arr, batch_size = 1) %>%
.[, , 1]
# rescale en format basique
lstm_forecast <- lstm_forecast * scale_factors[2] + scale_factors[1]
lstm_forecast
fitted <- predict(lstm_model, x_train_arr, batch_size = 1) %>%
.[, , 1]
if (dim(fitted)[2] > 1) {
fit <- c(fitted[, 1], fitted[dim(fitted)[1], 2:dim(fitted)[2]])
} else {
fit <- fitted[, 1]
}
# rescale final de nos données
fitted <- fit * scale_factors[2] + scale_factors[1]
fitted
fitted <- c(rep(NA, lag), fitted)
fitted
length(fitted)
lstm_forecast <- ts(lstm_forecast,
start = c(2019, 1),
end = c(2019, 12),
frequency = 12
)
lstm_forecast_display <- window(lstm_forecast, start= c(2019,1), end = c(2019,8))
input_ts <- ts(data$y,
start = c(2011, 1),
end = c(2018, 12),
frequency = 12)
lstm_forecast_display
data_ts_test
plot(input_ts, xlim=c(2011,2020))
#lines(data_ts_test)
lines(lstm_forecast_display, col=3)
data_value <- data[,2]
summary(data)
adf.test(data_ts)
library(tseries)
adf.test(data_ts)
kpss.test(data_ts)
